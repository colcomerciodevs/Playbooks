📘 EXPLICACIÓN TÉCNICA: Comparativa entre versiones de validación de red con Ansible

📌 Contexto:
Se diseñaron dos versiones de playbooks para validar conectividad (ping) y apertura de puertos en hosts Linux y Windows.
Ambas versiones generan un archivo CSV consolidado por host, pero difieren en diseño, ejecución y rendimiento.

═══════════════════════════════════════════════════════════════
🔁 VERSIÓN 1: Basada en tareas puras de Ansible (más detallada, pero lenta)
═══════════════════════════════════════════════════════════════

✔️ Características principales:
- Ansible ejecuta tareas independientes por cada IP y cada puerto.
- Uso de `include_tasks` para ping y validación de puertos.
- Cada resultado se guarda línea a línea en el CSV local usando `lineinfile`.

⏱️ Tiempo de ejecución promedio:
→ 6 minutos  
🔹 Inventario: 2 servidores Linux + 2 servidores Windows  
🔹 Matriz: 4 IPs × 4 puertos

⚠️ Factores de lentitud:
1. Cada validación representa una conexión remota desde el controlador.
2. Elevado número de tasks generadas: (número de IPs × puertos) × número de hosts.
3. Escritura remota en CSV línea por línea.
4. Uso excesivo de `set_fact` y otros bloques intermedios.

✅ Ventajas:
- Alta trazabilidad desde el lado de Ansible.
- Control detallado de cada validación (útil para entornos auditables).

❌ Desventajas:
- Muy lenta con grandes volúmenes de IPs y puertos.
- Poca escalabilidad para inventarios grandes.

═══════════════════════════════════════════════════════════════
🔁 VERSIÓN 2: Basada en scripts remotos (más rápida)
═══════════════════════════════════════════════════════════════

✔️ Características principales:
- Ansible transfiere los archivos `archivo_ips.txt`, `archivo_puertos.txt` y un script remoto (`valida_red.sh` o `valida_red.ps1`).
- El script se ejecuta localmente en cada host y realiza:
  • Pings en bucle.
  • Validación de puertos con redirección TCP o `TcpClient`.
  • Generación local del CSV en una única ejecución.
- Ansible se encarga únicamente de:
  1. Copiar archivos al host.
  2. Ejecutar el script vía `shell` o `win_shell`.
  3. Recuperar el CSV con `fetch`.

⏱️ Tiempo de ejecución promedio:
→ 1 minuto y 15 segundos  
🔹 Mismo inventario y matriz de prueba: 2 Linux + 2 Windows, 4 IPs × 4 puertos

⚡ Ventajas:
- Reducción drástica del tiempo de ejecución.
- Mucho más eficiente para entornos grandes.
- Minimiza el número de conexiones remotas.

❌ Desventajas:
- Menor visibilidad desde el lado de Ansible (la lógica se encuentra dentro del script).
- Menos granularidad si se requiere trazabilidad paso a paso.

═══════════════════════════════════════════════════════════════
📌 Conclusión técnica:

✔️ **Versión 2 (scripts remotos)** es ideal para escenarios donde el rendimiento y la escalabilidad son prioritarios.

✔️ **Versión 1 (tasks modulares)** puede seguir siendo útil cuando se requiere mayor trazabilidad, auditoría paso a paso, o control granular sobre cada validación.

🔐 Ambas versiones funcionan con autenticación SSH por clave pública (no contraseñas) y están validadas en entornos mixtos Windows–Linux.
