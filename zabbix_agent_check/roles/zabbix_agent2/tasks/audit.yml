---
# =============================================================================
# roles/zabbix_agent2/tasks/audit.yml
# AUDITORÍA EXTENDIDA DE ZABBIX AGENT1 / AGENT2 (SOLO LECTURA)
# Incluye exportación automática a Excel mediante script Python.
# =============================================================================

# 01️⃣ Asegurar que exista la carpeta de salida (controlador)
- name: 01) Crear carpeta de salida para la auditoría (controlador)
  run_once: true
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ zbx_audit_out_json | dirname }}"
    state: directory
    mode: "0755"
  changed_when: false

# 02️⃣ Validar instalación del Zabbix Agent 1 (v1)
- name: 02) Agent1 | Verificar instalación (rpm -q)
  ansible.builtin.shell: "rpm -q zabbix-agent || echo not_installed"
  register: zbx1_q
  changed_when: false

# 03️⃣ Extraer versión del Agent1 si aplica
- name: 03) Agent1 | Extraer versión instalada (si aplica)
  ansible.builtin.set_fact:
    zbx1_version: "{{ (zbx1_q.stdout | regex_search('([0-9]+\\.[0-9]+\\.[0-9]+)')) | default('No instalado', true) }}"
  changed_when: false

# 04️⃣ Validar instalación del Zabbix Agent 2 (v2)
- name: 04) Agent2 | Verificar instalación (rpm -q zabbix-agent2)
  ansible.builtin.shell: "rpm -q --qf '%{VERSION}\n' zabbix-agent2 || echo not_installed"
  register: zbx2_q
  changed_when: false

# 05️⃣ Extraer versión del Agent2 si aplica
- name: 05) Agent2 | Extraer versión instalada (si aplica)
  ansible.builtin.set_fact:
    zbx2_version: "{{ (zbx2_q.stdout | trim) if 'not_installed' not in zbx2_q.stdout else 'No instalado' }}"
  changed_when: false

# 06️⃣ Consultar estado del servicio zabbix-agent (v1)
- name: 06) Agent1 | Estado del servicio systemd
  ansible.builtin.shell: "systemctl is-active zabbix-agent || echo not_found"
  register: zbx1_state_q
  changed_when: false

# 07️⃣ Consultar estado del servicio zabbix-agent2 (v2)
- name: 07) Agent2 | Estado del servicio systemd
  ansible.builtin.shell: "systemctl is-active zabbix-agent2 || echo not_found"
  register: zbx2_state_q
  changed_when: false

# 08️⃣ Normalizar los estados (activo / inactivo / no instalado)
- name: 08) Normalizar estado de servicios
  ansible.builtin.set_fact:
    zbx1_state: >-
      {{
        'activo' if zbx1_state_q.stdout is search('^active$')
        else 'inactivo' if zbx1_state_q.stdout is search('^inactive$')
        else 'no instalado'
      }}
    zbx2_state: >-
      {{
        'activo' if zbx2_state_q.stdout is search('^active$')
        else 'inactivo' if zbx2_state_q.stdout is search('^inactive$')
        else 'no instalado'
      }}
  changed_when: false

# 09️⃣ Agregar descripción del sistema operativo (si está habilitado)
- name: 09) Preparar descripción del sistema operativo (opcional)
  ansible.builtin.set_fact:
    _os_desc: >-
      {{
        ansible_distribution ~
        ('' if ansible_distribution_major_version is not defined else (' ' ~ ansible_distribution_major_version)) ~
        ('' if ansible_distribution_version is not defined else (' (' ~ ansible_distribution_version ~ ')'))
      }}
  when: zbx_audit_include_os_facts | bool
  changed_when: false

# 🔟 Construir fila de auditoría por host
- name: 10) Construir fila de auditoría por host
  ansible.builtin.set_fact:
    zbx_audit_row:
      InventoryHostname: "{{ inventory_hostname }}"
      Hostname: "{{ ansible_hostname | default(inventory_hostname) }}"
      IP: "{{ ansible_host | default(ansible_default_ipv4.address | default('Desconocida')) }}"
      Estado_Agent1: "{{ zbx1_state }}"
      Estado_Agent2: "{{ zbx2_state }}"
      Version_Agent1: "{{ zbx1_version }}"
      Version_Agent2: "{{ zbx2_version }}"
      OS: "{{ _os_desc | default('N/A') }}"
  changed_when: false

# 11️⃣ Guardar fila en hostvars (para consolidar luego)
- name: 11) Guardar fila de auditoría en hostvars
  ansible.builtin.set_fact:
    _zbx_audit_row: "{{ zbx_audit_row }}"
  changed_when: false

# 12️⃣ Consolidar todas las filas en el controlador (localhost)
- name: 12) Consolidar auditoría en el controlador
  run_once: true
  delegate_to: localhost
  vars:
    all_rows: >-
      {{
        groups['all']
        | map('extract', hostvars, '_zbx_audit_row')
        | select('defined')
        | list
      }}
  block:
    # 12.1️⃣ Validar filas
    - name: 12.1) Validar que existan filas recolectadas
      ansible.builtin.assert:
        that:
          - all_rows | length > 0
        fail_msg: "❌ No se recolectaron filas de auditoría."
        success_msg: "✅ Se recolectaron {{ all_rows | length }} filas."

    # 12.2️⃣ Guardar JSON consolidado
    - name: 12.2) Guardar JSON consolidado
      ansible.builtin.copy:
        dest: "{{ zbx_audit_out_json }}"
        mode: "0644"
        content: "{{ all_rows | to_nice_json }}"
      changed_when: false

    # 12.3️⃣ Mostrar ruta del JSON generado
    - name: 12.3) Mostrar ruta del JSON generado
      ansible.builtin.debug:
        msg: "📁 Archivo JSON generado: {{ zbx_audit_out_json }}"

# 13️⃣ Ejecutar el script Python de exportación a Excel
- name: 13) Ejecutar script export_audit_excel.py (convertir JSON → Excel)
  run_once: true
  delegate_to: localhost
  ansible.builtin.command: >
    python3 scripts/export_audit_excel.py
    {{ zbx_audit_out_json }}
    {{ zbx_audit_out_excel }}
  register: export_excel
  changed_when: "'Exportado' in export_excel.stdout or '✅' in export_excel.stdout"
  failed_when: export_excel.rc != 0

# 14️⃣ Mostrar resultado final del proceso completo
- name: 14) Mostrar resumen de auditoría
  run_once: true
  delegate_to: localhost
  ansible.builtin.debug:
    msg:
      - "✅ Auditoría completada correctamente"
      - "📄 JSON: {{ zbx_audit_out_json }}"
      - "📊 Excel: {{ zbx_audit_out_excel }}"
