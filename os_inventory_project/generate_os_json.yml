# ============================================================
# Playbook: Generar JSON con hostname, IP (inventario), nombre del inventario y versión del S.O.
# Autor: Infraestructura Linux
# Descripción:
#   Recolecta información de cada host gestionado:
#     - Nombre definido en inventario (inventory_hostname)
#     - Hostname real del sistema operativo (ansible_hostname)
#     - Dirección IP tomada del inventario (ansible_host)
#     - Versión completa del sistema operativo (de ansible_facts)
#
#   Luego consolida todo en un archivo JSON y lo convierte a Excel.
# ============================================================

- name: Generar JSON con hostname, IP (inventario), nombre inventario y versión del S.O.
  hosts: PPU
  gather_facts: true
  vars:
    # 0# Ruta de salida del JSON y Excel en la raíz del proyecto
    out_dir: "{{ playbook_dir }}/Salidas_Playbooks"
    json_file: "{{ out_dir }}/version_sistemas.json"

  pre_tasks:
    # ============================================================
    # 1# Crear la carpeta de salida en localhost (una sola vez)
    # ============================================================
    - name: 1# Crear carpeta de salidas
      ansible.builtin.file:
        path: "{{ out_dir }}"
        state: directory
        mode: "0755"
      delegate_to: localhost
      run_once: true

    # ============================================================
    # 2# Inicializar la estructura por host donde guardaremos los datos
    # ============================================================
    - name: 2# Inicializar estructura de datos por host
      ansible.builtin.set_fact:
        host_entry: {}

  tasks:
    # 3.1# Mapa simple de nombres de distribución (normalizados)
    - name: 3.1# Normalizar nombre de distribución (mapa extendido)
      ansible.builtin.set_fact:
        distro_map:
          OracleLinux: "Oracle Linux"
          Oracle Linux Server: "Oracle Linux"
          RedHat: "Red Hat Enterprise Linux"
          Red Hat: "Red Hat Enterprise Linux"
          CentOS Linux: "CentOS"
          CentOS: "CentOS"
          Rocky: "Rocky Linux"
          AlmaLinux: "AlmaLinux"
          Ubuntu: "Ubuntu"
          Debian: "Debian"
          Amazon: "Amazon Linux"
          AmazonLinux: "Amazon Linux"
          SUSE: "SUSE Linux Enterprise Server"
          openSUSE: "openSUSE Leap"

    # 3.2# Determinar versión completa del S.O. (simple, limpia y robusta)
    - name: 3.2# Determinar versión completa del S.O. (sin 'NA', versión clara)
      ansible.builtin.set_fact:
        os_full_version: >-
          {% if ansible_lsb is defined and ansible_lsb.description is defined
                and (ansible_lsb.description | trim | length) > 0 %}
            {{ ansible_lsb.description }}
          {% else %}
            {% set distro = distro_map.get(ansible_distribution, ansible_distribution | default('Desconocido')) %}
            {% set ver    = (ansible_distribution_version | default('')) %}
            {% set rel    = (ansible_distribution_release | default('')) %}
            {% set rel_ok = (rel | lower not in ['na', 'n/a', '', 'none']) %}
            {{ distro }}{% if ver %} {{ ver }}{% endif %}{% if rel_ok %} ({{ rel }}){% endif %}
          {% endif %}

    # ============================================================
    # 4# Tomar IP desde el inventario con fallback al nombre de host
    # ============================================================
    - name: 4# Definir IP desde inventario (fallback)
      ansible.builtin.set_fact:
        ip_from_inventory: "{{ hostvars[inventory_hostname].ansible_host | default(inventory_hostname) }}"

    # ============================================================
    # 5# Construir entrada final por host con todos los campos requeridos
    # ============================================================
    - name: 5# Construir diccionario por host
      ansible.builtin.set_fact:
        host_entry:
          inventory_name: "{{ inventory_hostname }}"          # nombre definido en el inventario
          hostname: "{{ ansible_hostname | default(inventory_hostname) }}"  # nombre real del sistema operativo
          ip: "{{ ip_from_inventory }}"                       # IP definida o fallback
          os_full_version: "{{ os_full_version }}"             # versión completa del S.O.

  post_tasks:
    # ============================================================
    # 6# Consolidar toda la información de los hosts en una lista única
    # ============================================================
    - name: 6# Construir lista agregada de todos los hosts
      ansible.builtin.set_fact:
        aggregated_entries: >-
          {{
            ansible_play_hosts_all
            | map('extract', hostvars, 'host_entry')
            | select('defined')
            | select('ne', None)
            | list
          }}
      run_once: true

    # ============================================================
    # 7# Guardar la lista consolidada en un archivo JSON
    # ============================================================
    - name: 7# Guardar JSON consolidado
      ansible.builtin.copy:
        dest: "{{ json_file }}"
        content: "{{ aggregated_entries | to_json }}"
        mode: "0644"
      delegate_to: localhost
      run_once: true

    # ============================================================
    # 8# Ejecutar script Python que convierte el JSON a Excel
    #     - Asegúrate que exista: scripts/convert_json_to_excel.py
    # ============================================================
    - name: 8# Ejecutar script convert_json_to_excel.py
      ansible.builtin.command:
        cmd: "python3 {{ playbook_dir }}/scripts/convert_json_to_excel.py"
      delegate_to: localhost
      run_once: true
      changed_when: false
