---
# ============================================================
# TASKFILE: certificados.yml (rol ds2022_certificados)
# OBJETIVO:
#   - Verificar si los agentes de Trend Micro requieren enrolar
#     el certificado DS2022.der (u otras variantes como DS20_v2.der)
#   - Reiniciar ds_agent en cada host (stop -> wait -> start)
#   - Capturar estados de ds_agent y tmxbc (active/enabled)
#   - Generar un JSON y convertirlo a Excel
# SALIDAS:
#   {{ output_json }}
#   {{ output_dir }}/ds2022_result.xlsx
# PRERREQUISITOS:
#   - jq instalado en localhost (para insertar en JSON)
#   - python3 y pandas/openpyxl (si tu script los requiere)
# ============================================================

# 1.1 📁 Crear el directorio de salida si no existe
- name: 1.1 📁 Crear directorio de salida si no existe
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ output_dir }}"
    state: directory
    mode: "0755"

# 1.2 🧾 Inicializar JSON vacío si no existe
- name: 1.2 🧾 Inicializar JSON vacío si no existe
  delegate_to: localhost
  run_once: true
  ansible.builtin.shell: echo "[]" > {{ output_json }}
  args:
    creates: "{{ output_json }}"
  changed_when: false

# 2️⃣ Reinicio robusto de ds_agent (stop -> wait -> force-kill si aplica -> start)

# 2️⃣.0 Inicializar bandera de fuerza
- name: 2️⃣.0 Bandera de kill forzado (inicial)
  ansible.builtin.set_fact:
    ds_agent_force_kill: false

# 2️⃣.1 Intentar detener ds_agent vía systemd
- name: 2️⃣.1 Detener ds_agent si está activo (graceful)
  ansible.builtin.service:
    name: ds_agent
    state: stopped
  register: ds_agent_stop
  failed_when: false

# 2️⃣.2 Esperar a que el PID principal termine (hasta 30s)
- name: 2️⃣.2 Esperar a que ds_agent termine (máx 30s, no fallar)
  ansible.builtin.shell: |
    set -eo pipefail
    PID="$(systemctl show -p MainPID --value ds_agent 2>/dev/null || echo 0)"
    # Si no hay PID principal, considerar detenido
    if [ -z "$PID" ] || [ "$PID" = "0" ]; then exit 0; fi
    # Espera activa hasta 30s
    for i in $(seq 1 30); do
      if ! kill -0 "$PID" 2>/dev/null; then exit 0; fi
      sleep 1
    done
    # Si sigue vivo, devolver 1 (no fatal)
    exit 1
  register: wait_graceful
  changed_when: false
  failed_when: false

# 2️⃣.2b Si sigue vivo, enviar TERM y luego KILL
- name: 2️⃣.2b Forzar stop de ds_agent (TERM -> KILL) si siguió vivo
  ansible.builtin.shell: |
    # Intento de TERM a la unidad completa
    systemctl kill -s SIGTERM ds_agent || true
    sleep 3
    # Si aún hay procesos con ese nombre, SIGKILL
    if pgrep -x ds_agent >/dev/null; then
      systemctl kill -s SIGKILL ds_agent || true
      # Espera corta a que desaparezca
      for i in $(seq 1 10); do
        pgrep -x ds_agent >/dev/null || exit 0
        sleep 1
      done
    fi
    exit 0
  when: wait_graceful.rc != 0
  changed_when: true

- name: 2️⃣.2c Marcar que se usó kill forzado (si aplicó)
  ansible.builtin.set_fact:
    ds_agent_force_kill: true
  when: wait_graceful.rc != 0

# 2️⃣.3 Iniciar ds_agent
- name: 2️⃣.3 Iniciar ds_agent
  ansible.builtin.service:
    name: ds_agent
    state: started
  register: ds_agent_start
  failed_when: false

# 2️⃣.4 Marcar si el reinicio fue exitoso
- name: 2️⃣.4 Marcar si el reinicio fue exitoso
  ansible.builtin.set_fact:
    ds_agent_restart_ok: "{{ (ds_agent_start.failed | default(false) | bool) == false }}"


# 3️⃣ Revisar logs del servicio ds_agent
- name: 3️⃣ Revisar logs del servicio ds_agent
  ansible.builtin.shell: |
    journalctl -u ds_agent --no-pager -n 2000 2>/dev/null | \
    egrep -i "missing key|DS20|DS2022|tmhook failed" || true
  register: journal_ds
  changed_when: false

# 4️⃣ Buscar errores en dmesg
- name: 4️⃣ Buscar errores en dmesg
  ansible.builtin.shell: |
    dmesg -T 2>/dev/null | egrep -i "missing key|DS20|DS2022|tmhook|ds_am" || true
  register: dmesg_ds
  changed_when: false

# 5️⃣ Verificar si el módulo tmhook está cargado
- name: 5️⃣ Verificar si el módulo tmhook está cargado
  ansible.builtin.shell: "lsmod | egrep -w '^tmhook' || true"
  register: tmhook_mod
  changed_when: false

# 6️⃣ Consultar estado del agente con dsa_query (opcional)
- name: 6️⃣ Consultar estado del agente con dsa_query (opcional)
  ansible.builtin.shell: |
    if [ -x /opt/ds_agent/dsa_query ]; then
      /opt/ds_agent/dsa_query --cmd GetAgentStatus -t xml || true
    fi
  register: dsa_query_status
  changed_when: false

# 7️⃣ Evaluar si requiere enrolar DS2022
- name: 7️⃣ Evaluar si requiere enrolar DS2022
  ansible.builtin.set_fact:
    requiere_enrolar: >-
      {{
        (
          ((journal_ds.stdout | default('')) is search('missing key', ignorecase=True)) or
          ((journal_ds.stdout | default('')) is search('\\bDS2022\\b', ignorecase=True)) or
          ((journal_ds.stdout | default('')) is search('\\bDS20(_v2)?\\b', ignorecase=True)) or
          ((journal_ds.stdout | default('')) is search('tmhook\\s+.*failed', ignorecase=True)) or
          ((dmesg_ds.stdout | default(''))   is search('missing key', ignorecase=True)) or
          ((dmesg_ds.stdout | default(''))   is search('\\bDS2022\\b', ignorecase=True)) or
          ((dmesg_ds.stdout | default(''))   is search('\\bDS20(_v2)?\\b', ignorecase=True)) or
          ((dmesg_ds.stdout | default(''))   is search('tmhook\\s+.*failed', ignorecase=True))
        )
        and
        ((tmhook_mod.stdout | default('') | trim | length) == 0)
      }}

# 8️⃣ Calcular IP del inventario
- name: 8️⃣ Calcular IP del inventario
  ansible.builtin.set_fact:
    ip_inventario: "{{ hostvars[inventory_hostname].ansible_host | default(ansible_default_ipv4.address | default('')) }}"

# 9️⃣ Consultar estados finales de servicios (active/enabled)
- name: 9️⃣.1 Estado ds_agent (is-active)
  ansible.builtin.shell: "systemctl is-active ds_agent || true"
  register: ds_agent_active
  changed_when: false

- name: 9️⃣.2 Habilitación ds_agent (is-enabled)
  ansible.builtin.shell: "systemctl is-enabled ds_agent || true"
  register: ds_agent_enabled
  changed_when: false

- name: 9️⃣.3 Estado tmxbc (is-active)
  ansible.builtin.shell: "systemctl is-active tmxbc || true"
  register: tmxbc_active
  changed_when: false

- name: 9️⃣.4 Habilitación tmxbc (is-enabled)
  ansible.builtin.shell: "systemctl is-enabled tmxbc || true"
  register: tmxbc_enabled
  changed_when: false

# 🔟 Armar objeto JSON del host
- name: 🔟 Armar objeto JSON del host
  ansible.builtin.set_fact:
    json_item:
      IP_INVENTARIO: "{{ ip_inventario }}"
      HOSTNAME_INVENTARIO: "{{ inventory_hostname }}"
      HOSTNAME: "{{ ansible_hostname }}"
      REQUIERE_ENROLAR_DS2022: "{{ 'SI' if requiere_enrolar else 'NO' }}"
      DS_AGENT_REINICIO_OK: "{{ 'SI' if ds_agent_restart_ok else 'NO' }}"
      DS_AGENT_FORCE_KILL: "{{ 'SI' if (ds_agent_force_kill | default(false)) else 'NO' }}"
      DS_AGENT_ACTIVE: "{{ (ds_agent_active.stdout | default('') | trim) }}"
      DS_AGENT_ENABLED: "{{ (ds_agent_enabled.stdout | default('') | trim) }}"
      TMXBC_ACTIVE: "{{ (tmxbc_active.stdout | default('') | trim) }}"
      TMXBC_ENABLED: "{{ (tmxbc_enabled.stdout | default('') | trim) }}"


# 1️⃣1️⃣ Guardar resultado temporal del host
- name: 1️⃣1️⃣ Guardar resultado temporal del host
  delegate_to: localhost
  ansible.builtin.copy:
    content: "{{ json_item | to_nice_json }}"
    dest: "/tmp/{{ inventory_hostname }}_ds2022.tmp.json"

# 1️⃣2️⃣ Insertar resultado en JSON global (usa jq)
- name: 1️⃣2️⃣ Insertar resultado en JSON global
  delegate_to: localhost
  throttle: 1
  ansible.builtin.shell: |
    tmp="{{ output_json }}.tmp"
    jq '. += [input]' "{{ output_json }}" "/tmp/{{ inventory_hostname }}_ds2022.tmp.json" > "$tmp" && mv "$tmp" "{{ output_json }}"
    rm -f "/tmp/{{ inventory_hostname }}_ds2022.tmp.json"
  args:
    executable: /bin/bash
  changed_when: false

# 1️⃣3️⃣ Mostrar ruta final del JSON generado
- name: 1️⃣3️⃣ Mostrar ruta final del JSON
  delegate_to: localhost
  run_once: true
  ansible.builtin.debug:
    msg: "✅ Archivo JSON generado en: {{ output_json }}"

# 1️⃣4️⃣ Generar Excel final (pasa JSON y XLSX como argumentos)
- name: 1️⃣4️⃣ Generar Excel final
  delegate_to: localhost
  run_once: true
  ansible.builtin.command:
    cmd: >
      python3 "{{ python_script }}"
      "{{ output_json }}"
      "{{ output_dir }}/ds2022_result.xlsx"
  args:
    chdir: "{{ playbook_dir }}"
  register: excel_cmd
  changed_when: excel_cmd.rc == 0

