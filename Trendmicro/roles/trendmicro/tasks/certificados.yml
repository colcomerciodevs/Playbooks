---
# ============================================================
# TASKFILE: certificados.yml (rol ds2022_certificados)
# OBJETIVO:
#   - Verificar si los agentes de Trend Micro requieren enrolar
#     el certificado DS2022.der (u otras variantes como DS20_v2.der)
#   - Reiniciar ds_agent en cada host (stop -> wait -> start)
#   - Capturar estados de ds_agent y tmxbc (active/enabled)
#   - Generar un JSON y convertirlo a Excel
# SALIDAS:
#   {{ output_json }}
#   {{ output_dir }}/ds2022_result.xlsx
# PRERREQUISITOS:
#   - jq instalado en localhost (para insertar en JSON)
#   - python3 y pandas/openpyxl (si tu script los requiere)
# ============================================================

# 1.1 üìÅ Crear el directorio de salida si no existe
- name: 1.1 üìÅ Crear directorio de salida si no existe
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ output_dir }}"
    state: directory
    mode: "0755"

# 1.2 üßæ Inicializar JSON vac√≠o si no existe
- name: 1.2 üßæ Inicializar JSON vac√≠o si no existe
  delegate_to: localhost
  run_once: true
  ansible.builtin.shell: echo "[]" > {{ output_json }}
  args:
    creates: "{{ output_json }}"
  changed_when: false

# 2Ô∏è‚É£ Reiniciar ds_agent de forma controlada en cada host
- name: 2Ô∏è‚É£.1 Detener ds_agent si est√° activo
  ansible.builtin.service:
    name: ds_agent
    state: stopped
  register: ds_agent_stop
  failed_when: false

- name: 2Ô∏è‚É£.2 Esperar a que termine el proceso ds_agent (m√°x 30s)
  ansible.builtin.shell: >
    timeout 30 bash -c 'while pgrep -x ds_agent >/dev/null; do sleep 1; done'
  changed_when: false

- name: 2Ô∏è‚É£.3 Iniciar ds_agent
  ansible.builtin.service:
    name: ds_agent
    state: started
  register: ds_agent_start
  failed_when: false

- name: 2Ô∏è‚É£.4 Marcar si el reinicio fue exitoso
  ansible.builtin.set_fact:
    ds_agent_restart_ok: "{{ (ds_agent_start.failed | default(false) | bool) == false }}"

# 3Ô∏è‚É£ Revisar logs del servicio ds_agent
- name: 3Ô∏è‚É£ Revisar logs del servicio ds_agent
  ansible.builtin.shell: |
    journalctl -u ds_agent --no-pager -n 2000 2>/dev/null | \
    egrep -i "missing key|DS20|DS2022|tmhook failed" || true
  register: journal_ds
  changed_when: false

# 4Ô∏è‚É£ Buscar errores en dmesg
- name: 4Ô∏è‚É£ Buscar errores en dmesg
  ansible.builtin.shell: |
    dmesg -T 2>/dev/null | egrep -i "missing key|DS20|DS2022|tmhook|ds_am" || true
  register: dmesg_ds
  changed_when: false

# 5Ô∏è‚É£ Verificar si el m√≥dulo tmhook est√° cargado
- name: 5Ô∏è‚É£ Verificar si el m√≥dulo tmhook est√° cargado
  ansible.builtin.shell: "lsmod | egrep -w '^tmhook' || true"
  register: tmhook_mod
  changed_when: false

# 6Ô∏è‚É£ Consultar estado del agente con dsa_query (opcional)
- name: 6Ô∏è‚É£ Consultar estado del agente con dsa_query (opcional)
  ansible.builtin.shell: |
    if [ -x /opt/ds_agent/dsa_query ]; then
      /opt/ds_agent/dsa_query --cmd GetAgentStatus -t xml || true
    fi
  register: dsa_query_status
  changed_when: false

# 7Ô∏è‚É£ Evaluar si requiere enrolar DS2022
- name: 7Ô∏è‚É£ Evaluar si requiere enrolar DS2022
  ansible.builtin.set_fact:
    requiere_enrolar: >-
      {{
        (
          ((journal_ds.stdout | default('')) is search('missing key', ignorecase=True)) or
          ((journal_ds.stdout | default('')) is search('\\bDS2022\\b', ignorecase=True)) or
          ((journal_ds.stdout | default('')) is search('\\bDS20(_v2)?\\b', ignorecase=True)) or
          ((journal_ds.stdout | default('')) is search('tmhook\\s+.*failed', ignorecase=True)) or
          ((dmesg_ds.stdout | default(''))   is search('missing key', ignorecase=True)) or
          ((dmesg_ds.stdout | default(''))   is search('\\bDS2022\\b', ignorecase=True)) or
          ((dmesg_ds.stdout | default(''))   is search('\\bDS20(_v2)?\\b', ignorecase=True)) or
          ((dmesg_ds.stdout | default(''))   is search('tmhook\\s+.*failed', ignorecase=True))
        )
        and
        ((tmhook_mod.stdout | default('') | trim | length) == 0)
      }}

# 8Ô∏è‚É£ Calcular IP del inventario
- name: 8Ô∏è‚É£ Calcular IP del inventario
  ansible.builtin.set_fact:
    ip_inventario: "{{ hostvars[inventory_hostname].ansible_host | default(ansible_default_ipv4.address | default('')) }}"

# 9Ô∏è‚É£ Consultar estados finales de servicios (active/enabled)
- name: 9Ô∏è‚É£.1 Estado ds_agent (is-active)
  ansible.builtin.shell: "systemctl is-active ds_agent || true"
  register: ds_agent_active
  changed_when: false

- name: 9Ô∏è‚É£.2 Habilitaci√≥n ds_agent (is-enabled)
  ansible.builtin.shell: "systemctl is-enabled ds_agent || true"
  register: ds_agent_enabled
  changed_when: false

- name: 9Ô∏è‚É£.3 Estado tmxbc (is-active)
  ansible.builtin.shell: "systemctl is-active tmxbc || true"
  register: tmxbc_active
  changed_when: false

- name: 9Ô∏è‚É£.4 Habilitaci√≥n tmxbc (is-enabled)
  ansible.builtin.shell: "systemctl is-enabled tmxbc || true"
  register: tmxbc_enabled
  changed_when: false

# üîü Armar objeto JSON del host
- name: üîü Armar objeto JSON del host
  ansible.builtin.set_fact:
    json_item:
      IP_INVENTARIO: "{{ ip_inventario }}"
      HOSTNAME_INVENTARIO: "{{ inventory_hostname }}"
      HOSTNAME: "{{ ansible_hostname }}"
      REQUIERE_ENROLAR_DS2022: "{{ 'SI' if requiere_enrolar else 'NO' }}"
      DS_AGENT_REINICIO_OK: "{{ 'SI' if ds_agent_restart_ok else 'NO' }}"
      DS_AGENT_ACTIVE: "{{ (ds_agent_active.stdout | default('') | trim) }}"
      DS_AGENT_ENABLED: "{{ (ds_agent_enabled.stdout | default('') | trim) }}"
      TMXBC_ACTIVE: "{{ (tmxbc_active.stdout | default('') | trim) }}"
      TMXBC_ENABLED: "{{ (tmxbc_enabled.stdout | default('') | trim) }}"

# 1Ô∏è‚É£1Ô∏è‚É£ Guardar resultado temporal del host
- name: 1Ô∏è‚É£1Ô∏è‚É£ Guardar resultado temporal del host
  delegate_to: localhost
  ansible.builtin.copy:
    content: "{{ json_item | to_nice_json }}"
    dest: "/tmp/{{ inventory_hostname }}_ds2022.tmp.json"

# 1Ô∏è‚É£2Ô∏è‚É£ Insertar resultado en JSON global (usa jq)
- name: 1Ô∏è‚É£2Ô∏è‚É£ Insertar resultado en JSON global
  delegate_to: localhost
  throttle: 1
  ansible.builtin.shell: |
    tmp="{{ output_json }}.tmp"
    jq '. += [input]' "{{ output_json }}" "/tmp/{{ inventory_hostname }}_ds2022.tmp.json" > "$tmp" && mv "$tmp" "{{ output_json }}"
    rm -f "/tmp/{{ inventory_hostname }}_ds2022.tmp.json"
  args:
    executable: /bin/bash
  changed_when: false

# 1Ô∏è‚É£3Ô∏è‚É£ Mostrar ruta final del JSON generado
- name: 1Ô∏è‚É£3Ô∏è‚É£ Mostrar ruta final del JSON
  delegate_to: localhost
  run_once: true
  ansible.builtin.debug:
    msg: "‚úÖ Archivo JSON generado en: {{ output_json }}"

# 1Ô∏è‚É£4Ô∏è‚É£ Ejecutar script Python para generar Excel
- name: 1Ô∏è‚É£4Ô∏è‚É£ Ejecutar script Python para generar Excel
  delegate_to: localhost
  run_once: true
  ansible.builtin.shell: |
    if [ -f "{{ python_script }}" ]; then
      echo "üöÄ Ejecutando script Python..."
      python3 "{{ python_script }}"
    else
      echo "‚ö†Ô∏è  No se encontr√≥ el script {{ python_script }}"
    fi
  changed_when: false
