---
# 01# Reunir facts
- name: 01# Reunir facts
  ansible.builtin.setup:

# 02# Obtener facts de servicios
- name: 02# Obtener facts de servicios
  ansible.builtin.service_facts:

# 03# Construir clave de selección de instalador
- name: 03# Construir clave de selección de instalador
  ansible.builtin.set_fact:
    _nessus_selector: >-
      {%- if ansible_distribution in ['Amazon', 'Amazon Linux'] -%}
        Amazon-any
      {%- elif ansible_os_family in ['RedHat','OracleLinux'] -%}
        {{ ansible_os_family }}-{{ ansible_distribution_major_version | default('8') }}
      {%- elif ansible_os_family == 'Suse' -%}
        {{ ansible_os_family }}-{{ (ansible_distribution_version | regex_search('^\d+')) | default('12') }}
      {%- elif ansible_os_family in ['Debian','Ubuntu','Fedora'] -%}
        {{ ansible_os_family }}-any
      {%- else -%}
        {{ ansible_os_family }}-any
      {%- endif -%}

# 04# Resolver subcarpeta del instalador
- name: 04# Resolver subcarpeta del instalador
  ansible.builtin.set_fact:
    _nessus_pkg_subdir: "{{ nessus_pkg_dir_map.get(_nessus_selector, nessus_pkg_dir_map.get(ansible_os_family ~ '-any')) }}"

# 05# Localizar instalador en el controlador
- name: 05# Localizar instalador en el controlador
  ansible.builtin.find:
    paths: "{{ nessus_installers_dir }}/{{ _nessus_pkg_subdir }}"
    patterns: "NessusAgent*"
    file_type: file
  register: _pkg_search
  delegate_to: localhost

# 06# Validar un único instalador
- name: 06# Validar cantidad de instaladores encontrados
  ansible.builtin.assert:
    that: _pkg_search.files | length == 1
    fail_msg: "Debe existir exactamente 1 archivo en {{ nessus_installers_dir }}/{{ _nessus_pkg_subdir }}"
    success_msg: "Instalador localizado correctamente"

# 07# Asegurar ruta remota del instalador
- name: 07# Crear ruta remota del instalador si no existe
  ansible.builtin.file:
    path: "{{ nessus_installer_dest_dir }}"
    state: directory
    mode: "0755"

# 08# Copiar el instalador al host
- name: 08# Copiar instalador al host
  ansible.builtin.copy:
    src: "{{ _pkg_search.files[0].path }}"
    dest: "{{ nessus_installer_dest_dir }}/{{ _pkg_search.files[0].path | basename }}"
    mode: "0644"

# 09# Definir ruta final del instalador
- name: 09# Definir _installer_path
  ansible.builtin.set_fact:
    _installer_path: "{{ nessus_installer_dest_dir }}/{{ _pkg_search.files[0].path | basename }}"

# 10# Detectar presencia previa del agente (nessuscli)
- name: 10# Comprobar nessuscli existente
  ansible.builtin.stat:
    path: "{{ nessus_cli_path | default('/opt/nessus_agent/sbin/nessuscli') }}"
  register: _nessuscli_stat

# 11# Determinar unit (nessusagent vs nessus-agent)
- name: 11# Calcular unit de Nessus si existe
  ansible.builtin.set_fact:
    nessus_unit: >-
      {{
        'nessusagent' if 'nessusagent.service' in ansible_facts.services
        else (
          'nessus-agent' if 'nessus-agent.service' in ansible_facts.services
          else ''
        )
      }}

# 12# Parar servicio (si existía)
- name: 12# Parar servicio (si existía)
  ansible.builtin.systemd:
    name: "{{ nessus_unit }}"
    state: stopped
  when: nessus_unit | length > 0
  failed_when: false
  changed_when: false

# 13# Aviso si no hay servicio Nessus cargado
- name: 13# Aviso - no hay servicio Nessus cargado
  ansible.builtin.debug:
    msg: "Nessus Agent no instalado o sin unit registrada; no hay servicio que detener."
  when: nessus_unit | length == 0

# 14# Desvincular (unlink) si había agente previamente
- name: 14# Desvincular agente (best effort)
  ansible.builtin.command: "{{ nessus_cli_path | default('/opt/nessus_agent/sbin/nessuscli') }} agent unlink --force"
  register: _unlink_res
  when: _nessuscli_stat.stat.exists | default(false)
  failed_when: false
  changed_when: "'Successfully unlinked' in (_unlink_res.stdout | default('')) or (_unlink_res.rc | default(0)) == 0"

# 15# Quitar paquete Nessus Agent (cubre mayúsculas/minúsculas)
- name: 15# Quitar paquete Nessus Agent
  ansible.builtin.package:
    name: "{{ item }}"
    state: absent
  loop:
    - NessusAgent
    - nessus-agent
  register: _pkg_removed
  failed_when: false

# 16# Eliminar rutas y units residuales
- name: 16# Eliminar rutas y units residuales
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /opt/nessus_agent
    - /etc/nessus
    - /var/nessus
    - /var/log/tenable
    - /etc/systemd/system/nessusagent.service
    - /usr/lib/systemd/system/nessusagent.service
    - /etc/init.d/nessusagent
    - /etc/systemd/system/multi-user.target.wants/nessusagent.service
    - /etc/systemd/system.control/nessusagent.service.d
    - /etc/systemd/system/nessusagent.service.d
  register: _purge_files
  failed_when: false
  notify: Reload systemd daemon  # usa un handler real

# 17# Ejecutar handlers (daemon-reload) antes de seguir
- name: 17# Flush handlers
  ansible.builtin.meta: flush_handlers

# 18# Reset failed si existía la unit
- name: 18# Reset failed si existía la unit
  ansible.builtin.command: "systemctl reset-failed {{ nessus_unit | default('nessusagent') }}"
  when: nessus_unit | length > 0
  changed_when: false
  failed_when: false

# 19# Mostrar _installer_path (debug)
- name: 19# Debug instalador
  ansible.builtin.debug:
    msg: "Usando instalador: {{ _installer_path }}"

# 20# Validar que el instalador existe
- name: 20# Validar ruta del instalador
  ansible.builtin.stat:
    path: "{{ _installer_path }}"
  register: _inst_stat

- name: 20.1# Fallar si el instalador no existe
  ansible.builtin.fail:
    msg: "No existe el instalador en {{ _installer_path }}. Revisa el mapping {{ _nessus_pkg_subdir }}."
  when: not _inst_stat.stat.exists

# 21# Detectar nombre real del paquete desde el RPM
- name: 21# Detectar nombre del paquete (rpm -qp)
  ansible.builtin.command: "rpm -qp --queryformat %{NAME} {{ _installer_path }}"
  register: _rpm_name
  changed_when: false
  failed_when: false
  when: _installer_path | regex_search('\\.rpm$')

- name: 21.1# Set fact con nombre del paquete
  ansible.builtin.set_fact:
    nessus_pkg_name: "{{ (_rpm_name.stdout | trim) if (_rpm_name.stdout | default('') | length > 0) else 'NessusAgent' }}"

# 22# Instalar por familia (CLI; idempotente por creates)
- name: 22.1# Instalar en EL/OL/Fedora (dnf install RPM)
  ansible.builtin.shell: "set -o pipefail; dnf -y install '{{ _installer_path }}'"
  args:
    executable: /bin/bash
    creates: "{{ nessus_cli_path | default('/opt/nessus_agent/sbin/nessuscli') }}"
  when: ansible_os_family in ['RedHat','OracleLinux','Fedora']

- name: 22.2# Instalar en EL7/AmazonLinux (yum localinstall)
  ansible.builtin.shell: "set -o pipefail; yum -y localinstall '{{ _installer_path }}'"
  args:
    executable: /bin/bash
    creates: "{{ nessus_cli_path | default('/opt/nessus_agent/sbin/nessuscli') }}"
  when: ansible_pkg_mgr == 'yum'

- name: 22.3# Instalar en SUSE (zypper install)
  ansible.builtin.shell: "set -o pipefail; zypper --non-interactive --no-gpg-checks install '{{ _installer_path }}'"
  args:
    executable: /bin/bash
    creates: "{{ nessus_cli_path | default('/opt/nessus_agent/sbin/nessuscli') }}"
  when: ansible_os_family == 'Suse'

- name: 22.4# Instalar en Debian/Ubuntu (dpkg -i)
  ansible.builtin.shell: "set -o pipefail; dpkg -i '{{ _installer_path }}'"
  args:
    executable: /bin/bash
    creates: "{{ nessus_cli_path | default('/opt/nessus_agent/sbin/nessuscli') }}"
  when: ansible_os_family in ['Debian','Ubuntu']

# 23# Verificar instalación real (rpm/deb)
- name: 23.1# Verificar instalación con rpm -q
  ansible.builtin.command: "rpm -q {{ nessus_pkg_name | default('NessusAgent') }}"
  register: _rpmq_after
  changed_when: false
  failed_when: _rpmq_after.rc != 0
  when: ansible_os_family in ['RedHat','OracleLinux','Fedora']

- name: 23.2# Verificar instalación con dpkg -s
  ansible.builtin.command: "dpkg -s {{ (nessus_pkg_name | default('nessus-agent')) }}"
  register: _dpkg_after
  changed_when: false
  failed_when: _dpkg_after.rc != 0
  when: ansible_os_family in ['Debian','Ubuntu']

# 24# Refrescar service_facts tras instalar
- name: 24# Refrescar service_facts
  ansible.builtin.service_facts:

# 25# Detectar unit creada (nessusagent vs nessus-agent)
- name: 25# Calcular unit de Nessus tras instalación
  ansible.builtin.set_fact:
    nessus_unit: >-
      {{
        'nessusagent' if 'nessusagent.service' in ansible_facts.services
        else (
          'nessus-agent' if 'nessus-agent.service' in ansible_facts.services
          else ''
        )
      }}

# 26# Fallo claro si no hay unit
- name: 26# Validar unit creada
  ansible.builtin.fail:
    msg: "Paquete {{ nessus_pkg_name | default('NessusAgent') }} instalado, pero no aparece unit nessusagent/nessus-agent."
  when: nessus_unit | length == 0

# 27# Habilitar y arrancar servicio detectado
- name: 27# Habilitar y arrancar servicio
  ansible.builtin.systemd:
    name: "{{ nessus_unit }}"
    enabled: true
    state: started

# 28# Esperar a que esté active
- name: 28# Esperar a que el servicio esté active
  ansible.builtin.command: "systemctl is-active {{ nessus_unit }}"
  register: _svc_active_check
  retries: 10
  delay: 3
  until: _svc_active_check.stdout is defined and (_svc_active_check.stdout | trim) == 'active'
  changed_when: false

# 29# Estado del agente (pre-link)
- name: 29# Estado del agente (pre-link)
  ansible.builtin.command: "{{ nessus_cli_path | default('/opt/nessus_agent/sbin/nessuscli') }} agent status"
  register: _agent_status_pre
  changed_when: false
  failed_when: false

# 30# Vincular agente si aún no lo está (Linked to: None)
- name: 30# Vincular agente (si no está)
  ansible.builtin.command: >
    {{ nessus_cli_path | default('/opt/nessus_agent/sbin/nessuscli') }} agent link
    --key={{ nessus_agent_key }}
    --groups="{{ nessus_agent_groups }}"
    --host={{ nessus_manager_host }}
    --port={{ nessus_manager_port }}
  register: _link_result
  retries: 3
  delay: 3
  until: _link_result.stdout is search('Successfully linked|Linked to|already linked')
  changed_when: _link_result.stdout is search('Successfully linked')
  failed_when: false
  when: nessus_try_link | bool and (_agent_status_pre.stdout | default('')) is search('Linked to:\\s*None')

# 31# Servicio activo (verificación final)
- name: 31# Servicio activo (verificación final)
  ansible.builtin.command: "systemctl is-active {{ nessus_unit }}"
  register: _svc_active
  changed_when: false
  failed_when: false

# 32# Estado del agente (post-link) — salida cruda (stdout+stderr)
- name: 32# Estado del agente (post-link)
  ansible.builtin.shell: "{{ nessus_cli_path | default('/opt/nessus_agent/sbin/nessuscli') }} agent status 2>&1"
  args:
    executable: /bin/bash
  register: _status_cmd
  changed_when: false
  failed_when: false
  environment:
    LC_ALL: C

# 33# Extraer Link status con shell (tolerante a CR/LF)
- name: 33# Extraer Link status (shell)
  ansible.builtin.shell: |
    set -o pipefail
    {{ nessus_cli_path | default('/opt/nessus_agent/sbin/nessuscli') }} agent status 2>&1 \
    | tr -d '\r' \
    | grep -i '^Link[[:space:]]\+status[[:space:]]*:' -m1 \
    | sed -E 's/^[Ll]ink[[:space:]]+status[[:space:]]*:[[:space:]]*//'
  args:
    executable: /bin/bash
  register: _ls_cmd
  changed_when: false
  failed_when: false

# 34# Extraer Linked to con shell y normalizar
- name: 34# Extraer Linked to (shell)
  ansible.builtin.shell: |
    set -o pipefail
    {{ nessus_cli_path | default('/opt/nessus_agent/sbin/nessuscli') }} agent status 2>&1 \
    | tr -d '\r' \
    | grep -i '^Linked[[:space:]]\+to[[:space:]]*:' -m1 \
    | sed -E 's/^[Ll]inked[[:space:]]+to[[:space:]]*:[[:space:]]*//'
  args:
    executable: /bin/bash
  register: _lt_cmd
  changed_when: false
  failed_when: false

# 35# Normalizar indicadores (versión y flags)
- name: 35# Normalizar indicadores
  ansible.builtin.set_fact:
    _link_status_final: "{{ (_ls_cmd.stdout | default('') | trim) | default('N/A') }}"
    _linked_bool: >-
      {{
        (
          (_lt_cmd.stdout | default('') | trim | length > 0)
          and ((_lt_cmd.stdout | lower | trim) != 'none')
        )
        or (
          _link_result is defined and (
            'Successfully linked' in (_link_result.stdout | default(''))
            or 'already linked' in (_link_result.stdout | default(''))
          )
        )
      }}

# 36# Versión del agente (preferencia: rpm -q | cli --version | status)
- name: 36# Obtener versión del agente (rpm -q)
  ansible.builtin.command: "rpm -q --qf '%{VERSION}-%{RELEASE}\n' {{ nessus_pkg_name | default('NessusAgent') }}"
  register: _rpm_ver
  changed_when: false
  failed_when: false
  when: ansible_os_family in ['RedHat','OracleLinux','Fedora']

- name: 36.1# Obtener versión del agente (--version)
  ansible.builtin.command: "{{ nessus_cli_path }} --version"
  register: _cli_ver
  changed_when: false
  failed_when: false

- name: 36.2# Normalizar version final
  ansible.builtin.set_fact:
    _agent_version_final: >-
      {{
        (_rpm_ver.stdout | default('') | trim)
        if (ansible_os_family in ['RedHat','OracleLinux','Fedora'] and (_rpm_ver.stdout | default('') | trim | length > 0))
        else (
          (
            (_cli_ver.stdout | default('') | regex_findall('([0-9]+(?:\\.[0-9]+)+)') | default([]))
            | first | default('')
          )
        )
      }}

# 37# Construir resultado por host (final)
- name: 37# Construir resultado por host
  ansible.builtin.set_fact:
    nessus_result:
      host: "{{ inventory_hostname }}"
      os_name: "{{ ansible_distribution }}"
      os_family: "{{ ansible_os_family }}"
      os_version: "{{ ansible_distribution_version | default('') }}"
      agent_version: "{{ _agent_version_final | default('') }}"
      installed: "{{ (_svc_active.stdout | default('') | trim) == 'active' }}"
      service_active: "{{ (_svc_active.stdout | default('') | trim) == 'active' }}"
      linked: "{{ _linked_bool | bool }}"
      link_status: "{{ _link_status_final }}"
      manager_host: "{{ nessus_manager_host }}"
      manager_port: "{{ nessus_manager_port }}"
      groups: "{{ nessus_agent_groups }}"
      link_output: "{{ (_link_result.stdout | default('') | trim) }}"
      error: "{{ (_link_result.stderr | default('') | trim) }}"
      timestamp: "{{ ansible_date_time.iso8601 }}"

# 38# Consolidar lista global (run_once en controlador)
- name: 38# Agregar a lista global
  ansible.builtin.set_fact:
    _nessus_all: "{{ (_nessus_all | default([])) + [hostvars[item].nessus_result] }}"
  loop: "{{ ansible_play_hosts }}"
  run_once: true

# 39# Crear directorio de salida en el controlador
- name: 39# Crear directorio de salida en el controlador
  ansible.builtin.file:
    path: "{{ nessus_output_dir }}"
    state: directory
    mode: "0755"
  run_once: true
  delegate_to: localhost

# 40# Guardar JSON consolidado en el controlador
- name: 40# Guardar JSON consolidado
  ansible.builtin.copy:
    content: "{{ _nessus_all | to_nice_json }}"
    dest: "{{ nessus_output_dir }}/nessus_results.json"
    mode: "0644"
  run_once: true
  delegate_to: localhost

# 41# Generar Excel (controlador)
- name: 41# Generar Excel (controlador)
  ansible.builtin.command: >
    python3 scripts/nessus_excel_report.py
    {{ nessus_output_dir }}/nessus_results.json
    {{ nessus_output_dir }}/nessus_agent_reporte.xlsx
  register: myoutput
  changed_when: false
  failed_when: myoutput.rc != 0
  run_once: true
  delegate_to: localhost
