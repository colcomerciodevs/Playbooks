---
# 1# Reunir facts
- name: Reunir facts
  ansible.builtin.setup:

# 2 - Determinar clave de distro/versión (incluye Amazon como 1 solo caso)
- name: Construir clave de selección de instalador
  ansible.builtin.set_fact:
    _nessus_selector: >-
      {%- if ansible_distribution in ['Amazon', 'Amazon Linux'] -%}
        Amazon-any
      {%- elif ansible_os_family in ['RedHat','OracleLinux'] -%}
        {{ ansible_os_family }}-{{ ansible_distribution_major_version | default('8') }}
      {%- elif ansible_os_family == 'Suse' -%}
        {{ ansible_os_family }}-{{ (ansible_distribution_version | regex_search('^\d+')) | default('12') }}
      {%- elif ansible_os_family in ['Debian','Ubuntu','Fedora'] -%}
        {{ ansible_os_family }}-any
      {%- else -%}
        {{ ansible_os_family }}-any
      {%- endif -%}

# 3# Resolver subcarpeta del instalador
- name: Resolver carpeta del instalador
  ansible.builtin.set_fact:
    _nessus_pkg_subdir: "{{ nessus_pkg_dir_map.get(_nessus_selector, nessus_pkg_dir_map.get(ansible_os_family ~ '-any')) }}"

# 4# Buscar el instalador en el controlador
- name: Localizar instalador en el controlador
  ansible.builtin.find:
    paths: "{{ nessus_installers_dir }}/{{ _nessus_pkg_subdir }}"
    patterns: "NessusAgent*"
    file_type: file
  register: _pkg_search
  delegate_to: localhost

# 5# Validar un único instalador
- name: Validar cantidad de instaladores encontrados
  ansible.builtin.assert:
    that: _pkg_search.files | length == 1
    fail_msg: "Debe existir exactamente 1 archivo en {{ nessus_installers_dir }}/{{ _nessus_pkg_subdir }}"
    success_msg: "Instalador localizado correctamente"

# 5a# Asegurar ruta remota del instalador (por si no es $HOME)
- name: Crear ruta remota del instalador si no existe
  ansible.builtin.file:
    path: "{{ nessus_installer_dest_dir }}"
    state: directory
    mode: "0755"

# 6 - Copiar el instalador al host (usa la variable)
- name: Copiar instalador al host
  ansible.builtin.copy:
    src: "{{ _pkg_search.files[0].path }}"
    dest: "{{ nessus_installer_dest_dir }}/{{ _pkg_search.files[0].path | basename }}"
    mode: "0644"

# 7 - Definir ruta final del instalador (coincide con el #6)
- name: Definir _installer_path
  ansible.builtin.set_fact:
    _installer_path: "{{ nessus_installer_dest_dir }}/{{ _pkg_search.files[0].path | basename }}"

# 8 - Detectar presencia previa del agente (nessuscli)
- name: Comprobar nessuscli existente
  ansible.builtin.stat:
    path: "{{ nessus_cli_path }}"
  register: _nessuscli_stat

# 9 - Parar y deshabilitar servicio si estaba instalado
- name: Parar y deshabilitar servicio (si existía)
  ansible.builtin.shell: |
    set -e
    if command -v systemctl >/dev/null 2>&1; then
      systemctl stop nessusagent 2>/dev/null || true
      systemctl disable nessusagent 2>/dev/null || true
      systemctl reset-failed nessusagent 2>/dev/null || true
    else
      service nessusagent stop 2>/dev/null || true
    fi
  args:
    executable: /bin/bash
  when:
    - _nessuscli_stat is defined
    - _nessuscli_stat.stat is defined
    - _nessuscli_stat.stat.exists | default(false) | bool
  changed_when: false
  failed_when: false

# 10 - Desinstalar paquete en RHEL/Oracle/Fedora/Amazon (si estaba)
- name: Quitar paquete nessus-agent (rpm-based)
  ansible.builtin.shell: |
    set -e
    if command -v dnf >/dev/null 2>&1; then
      dnf -y remove nessus-agent || true
    elif command -v yum >/dev/null 2>&1; then
      yum -y remove nessus-agent || true
    else
      rpm -e nessus-agent || true
    fi
  args:
    executable: /bin/bash
  when:
    - _nessuscli_stat is defined
    - _nessuscli_stat.stat is defined
    - _nessuscli_stat.stat.exists | default(false) | bool
    - >
      (ansible_os_family in ['RedHat','OracleLinux','Fedora']) or
      (ansible_distribution in ['Amazon','Amazon Linux'])
  changed_when: false
  failed_when: false

# 11 - Desinstalar paquete en SUSE (si estaba)
- name: Quitar paquete nessus-agent (SUSE)
  ansible.builtin.shell: |
    set -e
    zypper -n rm -y nessus-agent || true
  args:
    executable: /bin/bash
  when:
    - _nessuscli_stat is defined
    - _nessuscli_stat.stat is defined
    - _nessuscli_stat.stat.exists | default(false) | bool
    - ansible_os_family == 'Suse'
  changed_when: false
  failed_when: false

# 12 - Desinstalar paquete en Debian/Ubuntu (si estaba)
- name: Quitar paquete nessus-agent (deb-based)
  ansible.builtin.shell: |
    set -e
    if command -v apt-get >/dev/null 2>&1; then
      apt-get -y remove nessus-agent || true
      apt-get -y autoremove || true
    else
      dpkg -r nessus-agent || true
    fi
  args:
    executable: /bin/bash
  when:
    - _nessuscli_stat is defined
    - _nessuscli_stat.stat is defined
    - _nessuscli_stat.stat.exists | default(false) | bool
    - ansible_os_family in ['Debian','Ubuntu']
  changed_when: false
  failed_when: false

# 13 - Limpiar restos del agente (solo si estaba)
- name: Borrar restos del agente (si existía)
  ansible.builtin.shell: |
    set -e
    rm -rf /opt/nessus_agent /etc/nessus /var/nessus /var/log/tenable \
           /etc/systemd/system/nessusagent.service /etc/init.d/nessusagent 2>/dev/null || true
    if command -v systemctl >/dev/null 2>&1; then
      systemctl daemon-reload || true
    fi
  args:
    executable: /bin/bash
  when: _nessuscli_stat.stat.exists | bool
  changed_when: false
  failed_when: false

# 14 - Instalar en RHEL/Oracle/Fedora/Amazon (sin repos)
- name: Instalar (rpm-based)
  ansible.builtin.shell: |
    set -e
    if command -v dnf >/dev/null 2>&1; then
      dnf -y install "{{ _installer_path }}" --disablerepo="*"
    elif command -v yum >/dev/null 2>&1; then
      yum -y localinstall "{{ _installer_path }}" --disablerepo="*"
    else
      rpm -Uvh --force "{{ _installer_path }}"
    fi
  args:
    executable: /bin/bash
  when: (ansible_os_family in ['RedHat','OracleLinux','Fedora']) or (ansible_distribution in ['Amazon','Amazon Linux'])

# 15 - Instalar en SUSE
- name: Instalar (SUSE)
  ansible.builtin.shell: |
    set -e
    zypper -n --no-gpg-checks install "{{ _installer_path }}"
  args:
    executable: /bin/bash
  when: ansible_os_family == 'Suse'

# 16 - Instalar en Debian/Ubuntu
- name: Instalar (deb-based)
  ansible.builtin.shell: |
    set -e
    dpkg -i "{{ _installer_path }}" || true
    if command -v apt-get >/dev/null 2>&1; then
      apt-get -y -o Acquire::Retries=0 -o Acquire::http::Timeout=1 -f install || true
    fi
  args:
    executable: /bin/bash
  when: ansible_os_family in ['Debian','Ubuntu']

# 17# Habilitar y arrancar servicio
- name: Habilitar y arrancar servicio
  ansible.builtin.service:
    name: nessusagent
    enabled: true
    state: started

# 18# Estado pre-link
- name: Estado del agente (pre-link)
  ansible.builtin.command: "{{ nessus_cli_path }} agent status"
  register: _agent_status_pre
  changed_when: false
  failed_when: false

# 19# Vincular (opcional)
- name: Vincular agente (opcional)
  ansible.builtin.command: >
    {{ nessus_cli_path }} agent link
    --key={{ nessus_agent_key }}
    --groups="{{ nessus_agent_groups }}"
    --host={{ nessus_manager_host }}
    --port={{ nessus_manager_port }}
  register: _link_result
  changed_when: "'Successfully linked' in _link_result.stdout"
  failed_when: false
  when: nessus_try_link | bool and ('Linked to' not in _agent_status_pre.stdout)

# 20# Servicio activo
- name: Verificar servicio activo
  ansible.builtin.shell: |
    if command -v systemctl >/dev/null 2>&1; then
      systemctl is-active nessusagent || true
    else
      service nessusagent status >/dev/null 2>&1 && echo active || echo inactive
    fi
  register: _svc_active
  changed_when: false

# 21# Estado post-link
- name: Estado del agente (post-link)
  ansible.builtin.command: "{{ nessus_cli_path }} agent status"
  register: _agent_status_post
  changed_when: false
  failed_when: false

# 22# Fact por host
- name: Construir resultado por host
  ansible.builtin.set_fact:
    nessus_result:
      host: "{{ inventory_hostname }}"
      os_family: "{{ ansible_os_family }}"
      os_version: "{{ ansible_distribution_version | default('') }}"
      agent_version: ""
      installed: true
      service_active: "{{ (_svc_active.stdout | default('') | trim) == 'active' }}"
      linked: "{{ 'Linked to' in (_agent_status_post.stdout | default('')) or 'Successfully linked' in (_link_result.stdout | default('')) }}"
      manager_host: "{{ nessus_manager_host }}"
      manager_port: "{{ nessus_manager_port }}"
      groups: "{{ nessus_agent_groups }}"
      link_output: "{{ _link_result.stdout | default('') }}"
      error: "{{ _link_result.stderr | default('') }}"
      timestamp: "{{ ansible_date_time.iso8601 }}"

# 23# Consolidar lista global (run_once)
- name: Agregar a lista global
  ansible.builtin.set_fact:
    _nessus_all: "{{ (_nessus_all | default([])) + [hostvars[item].nessus_result] }}"
  loop: "{{ ansible_play_hosts }}"
  run_once: true

# 24# Crear directorio de salida en el controlador
- name: Crear directorio de salida en el controlador
  ansible.builtin.file:
    path: "{{ nessus_output_dir }}"
    state: directory
    mode: "0755"
  run_once: true
  delegate_to: localhost

# 25# Guardar JSON
- name: Guardar JSON consolidado
  ansible.builtin.copy:
    content: "{{ _nessus_all | to_nice_json }}"
    dest: "{{ nessus_output_dir }}/nessus_results.json"
    mode: "0644"
  run_once: true
  delegate_to: localhost

# 26# Generar Excel (controlador)
- name: Generar Excel (controlador)
  ansible.builtin.command: >
    python3 {{ playbook_dir | realpath }}/nessus_excel_report.py
    {{ nessus_output_dir }}/nessus_results.json
    {{ nessus_output_dir }}/nessus_agent_reporte.xlsx
  run_once: true
  delegate_to: localhost
  changed_when: myoutput.rc != 0
