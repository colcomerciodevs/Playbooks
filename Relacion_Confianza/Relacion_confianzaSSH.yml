---
# Play: Tarea para crear relación de confianza SSH con llaves públicas
# Notas:
# - Las claves se leen desde archivos locales del controlador (lookup('file', ...)).
# - Se crea el usuario, se ajustan sudoers y se cargan las claves en authorized_keys.
# - Cada tarea está numerada y comentada para auditoría.

- name: Tarea para crear relación de confianza SSH con llaves públicas
  hosts: prueba
  become: true

  vars:
    # Lista de usuarios y rutas de sus claves .pub en el controlador
    usuarios_ansible:
      - name: iacolcoauto
        keys:
          - "files/ssh-keys/iacolcoauto.pub"
      - name: ansible_test
        keys:
          - "files/ssh-keys/ansible_test_ecdsa.pub"
          - "files/ssh-keys/ansible_test_rsa.pub"

  tasks:

    # 01) Seguridad sudoers: deshabilitar requiretty si está presente
    - name: 01) Deshabilitar Defaults requiretty en sudoers si existe
      # Evita que sudo requiera TTY en ejecuciones no interactivas
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        regexp: '^Defaults\s+requiretty'
        line: '# Defaults requiretty'
        state: present
        validate: visudo -cf %s

    # 02) Limpieza opcional: incluir subtareas para eliminar usuarios previos (si aplica)
    - name: 02) Incluir tareas para eliminar usuarios previos (opcional)
      ansible.builtin.include_tasks: ./Tasks/eliminar_usuario.yml
      loop: "{{ usuarios_ansible }}"
      loop_control:
        loop_var: item

    # 03) Crear usuarios sin contraseña (uso exclusivo por SSH-keys)
    - name: 03) Crear usuario sin contraseña (solo autenticación SSH)
      ansible.builtin.user:
        name: "{{ item.name }}"
        shell: /bin/bash
        create_home: true
        password: '*'
        update_password: on_create
      loop: "{{ usuarios_ansible }}"

    # 04) Resolver grupo primario del usuario (para asignación de owner:group)
    - name: 04) Obtener grupo primario del usuario
      ansible.builtin.command: "id -gn {{ item.name }}"
      register: resultado_grupo
      changed_when: false
      loop: "{{ usuarios_ansible }}"
      loop_control:
        label: "{{ item.name }}"

    # 05) Publicar el grupo primario como variable hostvar dedicada por usuario
    - name: 05) Establecer grupo primario como variable para cada usuario
      ansible.builtin.set_fact:
        "grupo_{{ item.item.name }}": "{{ item.stdout }}"
      loop: "{{ resultado_grupo.results }}"
      loop_control:
        label: "{{ item.item.name }}"

    # 06) Asegurar include de /etc/sudoers.d para reglas por-usuario
    - name: 06) Asegurar que includedir /etc/sudoers.d está presente en /etc/sudoers
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        line: '#includedir /etc/sudoers.d'
        state: present
        insertafter: EOF
        validate: visudo -cf %s

    # 07) Conceder sudo NOPASSWD a cada usuario administrado
    - name: 07) Permitir sudo sin contraseña a los usuarios
      ansible.builtin.lineinfile:
        path: "/etc/sudoers.d/{{ item.name }}"
        line: "{{ item.name }} ALL=(ALL) NOPASSWD: ALL"
        create: true
        owner: root
        group: root
        mode: '0440'
        validate: visudo -cf %s
      loop: "{{ usuarios_ansible }}"

    # 08) Crear ~/.ssh con permisos estrictos (0700)
    - name: 08) Crear directorio .ssh
      ansible.builtin.file:
        path: "/home/{{ item.name }}/.ssh"
        state: directory
        owner: "{{ item.name }}"
        group: "{{ hostvars[inventory_hostname]['grupo_' ~ item.name] }}"
        mode: '0700'
      loop: "{{ usuarios_ansible }}"

    # 09) Instalar claves públicas en authorized_keys (desde archivos .pub)
    - name: 09) Instalar llaves en authorized_keys (desde archivos .pub)
      # Se usa authorized_key para idempotencia; 'manage_dir: false' porque ya creamos ~/.ssh
      ansible.posix.authorized_key:
        user: "{{ item.0.name }}"
        state: present
        key: "{{ lookup('file', item.1) }}"
        manage_dir: false
        exclusive: false         # Cambia a true si quieres forzar solo estas llaves
        path: "/home/{{ item.0.name }}/.ssh/authorized_keys"
      loop: "{{ usuarios_ansible | subelements('keys') }}"

    # 10) Ajustar políticas de expiración y cambio de password
    - name: 10) Eliminar requerimiento de cambio de contraseña y expiraciones
      ansible.builtin.command: >
        chage -d -1 -I -1 -m 0 -M 99999 -E -1 {{ item.name }}
      loop: "{{ usuarios_ansible }}"
      changed_when: false

    # 11) Comprobar si existe el grupo 'ssh_access' (control de acceso por grupo)
    - name: 11) Verificar si existe el grupo 'ssh_access'
      ansible.builtin.shell: getent group ssh_access
      register: grupo_ssh_access
      failed_when: false
      changed_when: false

    # 12) Agregar usuarios al grupo 'ssh_access' solo si existe
    - name: 12) Incluir usuarios en el grupo 'ssh_access' si existe
      ansible.builtin.user:
        name: "{{ item.name }}"
        groups: ssh_access
        append: true
      when: grupo_ssh_access.rc == 0
      loop: "{{ usuarios_ansible }}"
